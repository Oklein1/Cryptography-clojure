; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"0.9.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉cyptography.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉cyptography.core꞉> 
; Syntax error compiling at (src/cyptography/polyAlphabeticCipher.clj:7:5).
; Unable to resolve symbol: caeser-cipher-encryption in this context
clj꞉cyptography.polyAlphabeticCipher꞉> 
nil
clj꞉cyptography.polyAlphabeticCipher꞉> 
; Syntax error compiling at (src/cyptography/polyAlphabeticCipher.clj:7:5).
; Unable to resolve symbol: caeser-cipher-encryption in this context
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.caeserEncryption/encrypt-to-ASCII
clj꞉cyptography.caeserEncryption꞉> 
#'cyptography.caeserEncryption/cipher-encryption
clj꞉cyptography.caeserEncryption꞉> 
#'cyptography.caeserEncryption/caeser-cipher-encryption
clj꞉cyptography.caeserEncryption꞉> 
#'cyptography.caeserEncryption/cipher-decryption
clj꞉cyptography.caeserEncryption꞉> 
#'cyptography.caeserEncryption/caeser-ciper-decrypted
clj꞉cyptography.caeserEncryption꞉> 
nil
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "Hello my name is ofir")
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
nil
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
(caeser-cipher-encryption 4 "hello my name is")
"lippsqdreqimw"
clj꞉cyptography.polyAlphabeticCipher꞉> 
(partition num "hello my name is")
; Error printing return value (ClassCastException) at clojure.lang.Numbers/isPos (Numbers.java:121).
; class clojure.core$num cannot be cast to class java.lang.Number (clojure.core$num is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
(partition num (clojure.string/split "hello my name is" #" "))
; Error printing return value (ClassCastException) at clojure.lang.Numbers/isPos (Numbers.java:121).
; class clojure.core$num cannot be cast to class java.lang.Number (clojure.core$num is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
(clojure.string/split "hello my name is" #" ")
["hello" "my" "name" "is"]
clj꞉cyptography.polyAlphabeticCipher꞉> 
(parition 4 ["hello" "my" "name" "is"])
; Syntax error compiling at (.calva/output-window/output.calva-repl:69:1).
; Unable to resolve symbol: parition in this context
clj꞉cyptography.polyAlphabeticCipher꞉> 
(clojure.string/split "abc" #"")
["a" "b" "c"]
clj꞉cyptography.polyAlphabeticCipher꞉> 
13
clj꞉cyptography.polyAlphabeticCipher꞉> 
; Execution error (IllegalArgumentException) at cyptography.polyAlphabeticCipher/eval7836 (form-init15261712171441682031.clj:10).
; Don't know how to create ISeq from: java.util.regex.Pattern
clj꞉cyptography.polyAlphabeticCipher꞉> 
"h e l l o   m y   n a m e   i s"
clj꞉cyptography.polyAlphabeticCipher꞉> 
"hello my name is"
clj꞉cyptography.polyAlphabeticCipher꞉> 
[104 101 108 108 111 109 121 110 97 109 101 105 115]
clj꞉cyptography.polyAlphabeticCipher꞉> 
(parition 4 (encrypt-to-ASCII "hello my name is"))
; Syntax error compiling at (.calva/output-window/output.calva-repl:87:1).
; Unable to resolve symbol: parition in this context
clj꞉cyptography.polyAlphabeticCipher꞉> 
((104 101 108 108) (111 109 121 110) (97 109 101 105))
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alhpa
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alhpa 4)
; Execution error (ClassCastException) at cyptography.polyAlphabeticCipher/poly-alhpa$fn (form-init15261712171441682031.clj:21).
; class clojure.lang.LazySeq cannot be cast to class java.lang.Number (clojure.lang.LazySeq is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
((104 101 108 108) (111 109 121 110) (97 109 101 105))
clj꞉cyptography.polyAlphabeticCipher꞉> 
; Error printing return value (ClassCastException) at cyptography.polyAlphabeticCipher/eval7856$fn (form-init15261712171441682031.clj:16).
; class clojure.lang.LazySeq cannot be cast to class clojure.lang.IFn (clojure.lang.LazySeq and clojure.lang.IFn are in unnamed module of loader 'app')
clj꞉cyptography.polyAlphabeticCipher꞉> 
((104 101 108 108) (111 109 121 110) (97 109 101 105))
nil
clj꞉cyptography.polyAlphabeticCipher꞉> 
(104 101 108 108)
(111 109 121 110)
(97 109 101 105)
(nil nil nil)
clj꞉cyptography.polyAlphabeticCipher꞉> 
("clojure.lang.LazySeq@3ee6be" "clojure.lang.LazySeq@4234f4" "clojure.lang.LazySeq@3bd551")
clj꞉cyptography.polyAlphabeticCipher꞉> 
; Error printing return value (ClassCastException) at clojure.lang.RT/charCast (RT.java:1060).
; class clojure.lang.LazySeq cannot be cast to class java.lang.Number (clojure.lang.LazySeq is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
; Error printing return value (ClassCastException) at clojure.lang.RT/charCast (RT.java:1060).
; class clojure.lang.LazySeq cannot be cast to class java.lang.Number (clojure.lang.LazySeq is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
((104 101 108 108) (111 109 121 110) (97 109 101 105))
clj꞉cyptography.polyAlphabeticCipher꞉> 
(map (fn [lst]
       (map (fn [letter]
              (char letter)) lst)) (partition 4 (encrypt-to-ASCII "hello my name is")))
((\h \e \l \l) (\o \m \y \n) (\a \m \e \i))
clj꞉cyptography.polyAlphabeticCipher꞉> 
(str (map (fn [lst]
       (map (fn [letter]
              (char letter)) lst)) (partition 4 (encrypt-to-ASCII "hello my name is"))))
"clojure.lang.LazySeq@f460e27a"
clj꞉cyptography.polyAlphabeticCipher꞉> 
(map str (map (fn [lst]
       (map (fn [letter]
              (char letter)) lst)) (partition 4 (encrypt-to-ASCII "hello my name is"))))
("clojure.lang.LazySeq@3ee6be" "clojure.lang.LazySeq@4234f4" "clojure.lang.LazySeq@3bd551")
clj꞉cyptography.polyAlphabeticCipher꞉> 
(map (fn [lst]
       (map (fn [letter]
              (char letter)) lst)) (partition 4 (encrypt-to-ASCII "hello my name is")))
((\h \e \l \l) (\o \m \y \n) (\a \m \e \i))
clj꞉cyptography.polyAlphabeticCipher꞉> 
(("h" "e" "l" "l") ("o" "m" "y" "n") ("a" "m" "e" "i"))
clj꞉cyptography.polyAlphabeticCipher꞉> 
("clojure.lang.LazySeq@3ee6be" "clojure.lang.LazySeq@4234f4" "clojure.lang.LazySeq@3bd551")
clj꞉cyptography.polyAlphabeticCipher꞉> 
("clojure.lang.LazySeq@3ee6be" "clojure.lang.LazySeq@4234f4" "clojure.lang.LazySeq@3bd551")
clj꞉cyptography.polyAlphabeticCipher꞉> 
("clojure.lang.LazySeq@3ee6be" "clojure.lang.LazySeq@4234f4" "clojure.lang.LazySeq@3bd551")
clj꞉cyptography.polyAlphabeticCipher꞉> 
(partition 4 (encrypt-to-ASCII "hello my name is"))
((104 101 108 108) (111 109 121 110) (97 109 101 105))
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/make-letter-groups
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
#function[clojure.core/map/fn--5862]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/make-letter-groups
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
#function[clojure.core/map/fn--5862]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/make-letter-groups
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
#function[clojure.core/map/fn--5862]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/make-letter-groups
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
(("h" "e" "l" "l") ("o" "m" "y" "n") ("a" "m" "e" "i"))
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/make-letter-groups
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
("clojure.lang.LazySeq@3ee6be" "clojure.lang.LazySeq@4234f4" "clojure.lang.LazySeq@3bd551")
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/make-letter-groups
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
("hell" "omyn" "amei")
clj꞉cyptography.polyAlphabeticCipher꞉> 
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉>  (poly-alphabetic-cipher 4 "hello my name is")
("hell" "omyn" "amei")
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
("hell" "omyn" "amei")
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
hell
omyn
amei
(nil nil nil)
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Execution error (ClassCastException) at cyptography.polyAlphabeticCipher/poly-alphabetic-cipher$fn (form-init15261712171441682031.clj:24).
; class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Execution error (ClassCastException) at cyptography.polyAlphabeticCipher/poly-alphabetic-cipher$fn (form-init15261712171441682031.clj:24).
; class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
(char "hello")
; Execution error (ClassCastException) at cyptography.polyAlphabeticCipher/eval8026 (form-init15261712171441682031.clj:239).
; class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
clj꞉cyptography.polyAlphabeticCipher꞉> 
(encrypt-to-ASCII "hello")
[104 101 108 108 111]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
[104 101 108 108]
[111 109 121 110]
[97 109 101 105]
[nil nil nil]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Execution error (IllegalArgumentException) at cyptography.polyAlphabeticCipher/poly-alphabetic-cipher (form-init15261712171441682031.clj:21).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
; Execution error (IllegalArgumentException) at cyptography.polyAlphabeticCipher/poly-alphabetic-cipher (form-init15261712171441682031.clj:21).
; Don't know how to create ISeq from: java.lang.Long
clj꞉cyptography.polyAlphabeticCipher꞉> 
(cipher-encryption (make-letter-groups 4 "hello my name is"))
; Execution error (ArityException) at cyptography.polyAlphabeticCipher/eval8041 (form-init15261712171441682031.clj:266).
; Wrong number of args (1) passed to: cyptography.caeserEncryption/cipher-encryption
clj꞉cyptography.polyAlphabeticCipher꞉> 
(cipher-encryption 4 "hello my name is")
[\l \i \p \p \s \q \d \r \e \q \i \m \w]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(cipher-encryption 4 "hello my name is")
[\l \i \p \p \s \q \d \r \e \q \i \m \w]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(cipher-encryption 4 "hello my name is")
[\l \i \p \p \s \q \d \r \e \q \i \m \w]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(cipher-encryption 4 "hello my name is")
[\l \i \p \p \s \q \d \r \e \q \i \m \w]
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
("hell" "omyn" "amei")
clj꞉cyptography.polyAlphabeticCipher꞉> 
(get (make-letter-groups 4 "hello my name is") 0)
nil
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/make-letter-groups
clj꞉cyptography.polyAlphabeticCipher꞉> 
(make-letter-groups 4 "hello my name is")
["hell" "omyn" "amei"]
clj꞉cyptography.polyAlphabeticCipher꞉> 
(get 1 (make-letter-groups 4 "hello my name is"))
nil
clj꞉cyptography.polyAlphabeticCipher꞉> 
(get (make-letter-groups 4 "hello my name is") 0)
"hell"
clj꞉cyptography.polyAlphabeticCipher꞉> 
(caeser-cipher-encrypted 4 "hell")
[108 105 112 112]
clj꞉cyptography.polyAlphabeticCipher꞉> 
["lipps" "bsvph"]
clj꞉cyptography.polyAlphabeticCipher꞉> 
["lipp" "sqdr" "eqim"]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-cipher
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-cipher 4 "hello my name is")
["lipp" "sqdr" "eqim"]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-encrpyt
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-encrpyt
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-encrpyt
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-)
#'cyptography.polyAlphabeticCipher/poly-alphabetic-encrpyt
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-decrypt
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-decrypt 4 (poly-alphabetic-encrpyt n "hello my name is"))
; Syntax error compiling at (.calva/output-window/output.calva-repl:328:28).
; Unable to resolve symbol: n in this context
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-decrypt 4 (poly-alphabetic-encrpyt 4 "hello my name is"))
[[\h \e \l \l] [\o \m \y \n] [\a \m \e \i]]
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-decrypt
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-decrypt 4 (poly-alphabetic-encrpyt 4 "hello my name is"))
["hell" "omyn" "amei"]
clj꞉cyptography.polyAlphabeticCipher꞉> 
(into "" ["hell" "omyn" "amei"])
; Execution error (ClassCastException) at cyptography.polyAlphabeticCipher/eval8108 (form-init15261712171441682031.clj:340).
; class java.lang.String cannot be cast to class clojure.lang.IPersistentCollection (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')
clj꞉cyptography.polyAlphabeticCipher꞉> 
(map str ["hell" "omyn" "amei"])
("hell" "omyn" "amei")
clj꞉cyptography.polyAlphabeticCipher꞉> 
(apply map str ["hell" "omyn" "amei"])
("hoa" "emm" "lye" "lni")
clj꞉cyptography.polyAlphabeticCipher꞉> 
(apply ["hell" "omyn" "amei"])
; Execution error (ArityException) at cyptography.polyAlphabeticCipher/eval8114 (form-init15261712171441682031.clj:350).
; Wrong number of args (1) passed to: clojure.core/apply
clj꞉cyptography.polyAlphabeticCipher꞉> 
(apply str ["hell" "omyn" "amei"])
"hellomynamei"
clj꞉cyptography.polyAlphabeticCipher꞉> 
#'cyptography.polyAlphabeticCipher/poly-alphabetic-decrypt
clj꞉cyptography.polyAlphabeticCipher꞉> 
(poly-alphabetic-decrypt 4 (poly-alphabetic-encrpyt 4 "hello my name is"))
"hellomynamei"
clj꞉cyptography.polyAlphabeticCipher꞉> 
